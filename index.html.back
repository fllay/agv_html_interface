<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8" />

    <script type="text/javascript" src="scripts/easeljs.min.js"></script>
    <script type="text/javascript" src="scripts/eventemitter2.min.js"></script>
    <script type="text/javascript" src="scripts/roslib.min.js"></script>
    <script type="text/javascript" src="scripts/ros2d.min.js"></script>
    <script type="text/javascript" src="scripts/nav2d.js"></script>
    <script type="text/javascript" src="scripts/ros3d.min.js"></script>



    <link rel="stylesheet" href="/css/bootstrap.css">

    <!-- jQuery library -->
    <script src="/js/jquery.js"></script>

    <!-- Latest compiled JavaScript -->
    <script src="/js/bootstrap.js"></script>

    <script src="scripts/axios.min.js"></script>


    <script src="/js/bootstrap-toggle.min.js"></script>
    <script src="/js/nipplejs.min.js"></script>
    <script src="/js/dataTables.dataTables.min.js"></script>
    <script src="/js/bootstrap-table.min.js"></script>
    <script src="/js/Chart.min.js"></script>
    <script type='text/javascript' src="scripts/GaugeMeter.js"></script>
    <script type='text/javascript' src="scripts/gauge.js"></script>


    <link rel="stylesheet" href="/css/bootstrap-table.min.css">
    <link rel="stylesheet" href="/css/Chart.min.css">
    <link rel="stylesheet" href="/css/bootstrap-toggle.min.css">


    <style>
        body {
            background-color: linen;
        }

        .table tbody tr.highlight td {
            background-color: #ddd;
        }


        .GaugeMeter {
            Position: Relative;
            Text-Align: Center;
            Overflow: Hidden;
            Cursor: Default;
        }

        .GaugeMeter SPAN,
        .GaugeMeter B {
            Margin: 0 10%;
            Width: 80%;
            Position: Absolute;
            Text-align: Center;
            Display: Inline-Block;
            Color: RGBa(0, 0, 0, .8);
            Font-Weight: 100;
            Font-Family: "Open Sans", Arial;
            Overflow: Hidden;
            White-Space: NoWrap;
            Text-Overflow: Ellipsis;
        }

        .GaugeMeter[data-style="Semi"] B {
            Margin: 0 10%;
            Width: 100%;
        }

        .GaugeMeter S,
        .GaugeMeter U {
            Text-Decoration: None;
            Font-Size: .5em;
            Opacity: .5;
        }

        .GaugeMeter B {
            Color: Black;
            Font-Weight: 300;
            Font-Size: .5em;
            Opacity: .8;
        }
    </style>

    <script type="text/javascript" type="text/javascript">
        /**
         * Setup all visualization elements when the page is loaded.
         */
        //const axios  = new axios()


        var ip = ""
        var rosConn;
        var mapTable = $('#mapTable')
        var mapname = "map"
        var manager = null
        var twist;
        var cmdVel;
        var publishImmidiately = true;
        var selectedMapName = "tmp"
        var seqWayPoint = 1
        var wpointname;
        var gmap_name = ""
        var g_pose
        var listener
        var gauge_lin
        var time = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        // For drawing the lines
        var imuData = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        var angularVelocity = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        var myChart = null

        function createJoystick() {
            // Check if joystick was aready created
            if (manager == null) {
                joystickContainer = document.getElementById('joystick');
                // joystck configuration, if you want to adjust joystick, refer to:
                // https://yoannmoinet.github.io/nipplejs/
                var options = {
                    zone: joystickContainer,
                    position: {
                        left: 50 + '%',
                        top: 105 + 'px'
                    },
                    mode: 'static',
                    size: 200,
                    color: '#0066ff',
                    restJoystick: true
                };
                manager = nipplejs.create(options);
                // event listener for joystick move
                manager.on('move', function (evt, nipple) {
                    // nipplejs returns direction is screen coordiantes
                    // we need to rotate it, that dragging towards screen top will move robot forward
                    var direction = nipple.angle.degree - 90;
                    if (direction > 180) {
                        direction = -(450 - nipple.angle.degree);
                    }
                    // convert angles to radians and scale linear and angular speed
                    // adjust if youwant robot to drvie faster or slower
                    var lin = Math.cos(direction / 57.29) * nipple.distance * 0.001;
                    var ang = Math.sin(direction / 57.29) * nipple.distance * 0.01;
                    // nipplejs is triggering events when joystic moves each pixel
                    // we need delay between consecutive messege publications to 
                    // prevent system from being flooded by messages
                    // events triggered earlier than 50ms after last publication will be dropped 
                    if (publishImmidiately) {
                        publishImmidiately = false;
                        moveAction(lin, ang);
                        setTimeout(function () {
                            publishImmidiately = true;
                        }, 50);
                    }
                });
                // event litener for joystick release, always send stop message
                manager.on('end', function () {
                    moveAction(0, 0);
                });
            }
        }

        function moveAction(linear, angular) {
            if (linear !== undefined && angular !== undefined) {
                twist.linear.x = linear;
                twist.angular.z = angular;
            } else {
                twist.linear.x = 0;
                twist.angular.z = 0;
            }
            cmdVel.publish(twist);
        }

        //function init() {
        $(document).ready(function () {
            //axios = require('axios')
            //console.log(axios)


            var opts = {
                angle: 0.15, // The span of the gauge arc
                lineWidth: 0.44, // The line thickness
                radiusScale: 1, // Relative radius
                pointer: {
                    length: 0.6, // // Relative to gauge radius
                    strokeWidth: 0.035, // The thickness
                    color: '#000000' // Fill color
                },
                staticLabels: {
                    font: "10px sans-serif", // Specifies font
                    labels: [-0.5, -0.4, -0.3, -0.2, -0.1, 0, 0.1, 0.2, 0.2, 0.4,
                        0.5
                    ], // Print labels at these values
                    color: "#000000", // Optional: Label text color
                    fractionDigits: 0 // Optional: Numerical precision. 0=round off.
                },
                renderTicks: {
                    divisions: 5,
                    divWidth: 1.1,
                    divLength: 0.7,
                    divColor: '#333333',
                    subDivisions: 3,
                    subLength: 0.5,
                    subWidth: 0.6,
                    subColor: '#666666'
                },
                limitMax: false, // If false, max value increases automatically if value > maxValue
                limitMin: false, // If true, the min value of the gauge will be fixed
                colorStart: '#6FADCF', // Colors
                colorStop: '#8FC0DA', // just experiment with them
                strokeColor: '#E0E0E0', // to see which ones work best for you
                generateGradient: true,
                highDpiSupport: true, // High resolution support

            };
            var target = document.getElementById('gauge_1'); // your canvas element
            gauge_lin = new Gauge(target) // create sexy gauge!
            gauge_lin.maxValue = 0.5 // set max gauge value
            gauge_lin.setMinValue(-0.5); // Prefer setter over gauge.minValue = 0
            gauge_lin.animationSpeed = 128; // set animation speed (32 is default value)


            $(".GaugeMeter").gaugeMeter();



            wpointname = document.getElementById('waypointname');
            createJoystick();
            loadMap()
            $('#waypointTable').bootstrapTable({
                onCheck: function (row, $element) {
                    //alert(JSON.stringify(row));
                    var getwaypointparam = new ROSLIB.ServiceRequest({
                        name: row.name,
                        mapname: gmap_name
                    });



                    getPoseWaypointName.callService(getwaypointparam, function (result) {
                        g_pose = result
                        console.log(result);
                    })
                }
            });


            $('#mapTable').bootstrapTable({
                onCheck: function (row, $element) {
                    //alert(JSON.stringify(row));
                    gmap_name = row.name
                    var getwaypointparam = new ROSLIB.ServiceRequest({
                        mapname: row.name
                    });


                    getWaypointName.callService(getwaypointparam, function (result) {
                        console.log(result);
                        var dataSet = []
                        result.waypointname.forEach(fn => {
                            var item = {
                                name: fn
                            }
                            dataSet.push(item)
                            console.log(fn)

                        });


                        console.log(dataSet)

                        $('#waypointTable').bootstrapTable({
                            data: dataSet
                        })

                        // $('#mapTable').bootstrapTable("destroy");
                        $('#waypointTable').bootstrapTable('load', dataSet)
                    })

                    var getwaypointparam = new ROSLIB.ServiceRequest({
                        name: row.name
                    });



                    getWayPoints.callService(getwaypointparam, function (result) {
                        console.log(result);
                    })
                }
            });




            /*      const checkbox = document.getElementById('switch_slam')
              console.log("+++++++++++++++++")

              console.log(checkbox)


              checkbox.addEventListener('change', (event) => {
                  console.log("checked !!!!!!")
                  if (event.target.checked) {
                      startSLAMsrv.callService(onSlam, function (result) {
                          console.log(result);
                      })
                      alert('checked');
                  } else {
                      startSLAMsrv.callService(offSlam, function (result) {
                          console.log(result);
                      })
                      alert('not checked');
                  }
              })*/




            /*mapTable.on('select', function (e, dt, type, indexes) {
                var count = table.rows({
                    selected: true
                }).count();
                console.log("==============================>")
                console.log(count)

                // do something with the number of selected rows
            });*/

            /* var dataSet = [['aaaaa'],['bbbb'],['cccccc']]
             console.log(dataSet)
             var mTable = $('#mapTable').DataTable({
                 aaData: dataSet,
                 columns: [{
                         title: "Name"
                     }
                 ]
             });*/

            //console.log(mTable)

            // Our labels along the x-axis



            var ctx = document.getElementById("imuChart");
            myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: time,
                    datasets: [{
                        data: imuData
                    }, {
                        data: angularVelocity
                    }]
                },
                options: {
                    scales: {
                        yAxes: [{
                            ticks: {
                                beginAtZero: true,
                                min: -0.01,
                                max: 0.01,
                                stepSize: 0.0005,
                            }
                        }]
                    }
                }

            });


        })


        ip = location.host;
        ip = ip.substring(0, ip.indexOf(':'));
        console.log(ip)

        var baseZoomX = 1;
        var baseZoomY = 1;
        // Connect to ROS.
        var ros = new ROSLIB.Ros({
            //url: 'ws://192.168.88.248:9090'
            url: "ws://" + ip + ":9090"

        });










        // Scale the canvas to fit to the map

        /*var aaa1 = new ROS2D.ArrowShape({
            rootObject: viewer.scene
        })*/

        /*gridClient.on('change', function () {
            viewer.scaleToDimensions(gridClient.currentGrid.width, gridClient.currentGrid.height);
            viewer.shift(gridClient.currentGrid.pose.position.x, gridClient.currentGrid.pose.position.y);
            viewer.scene.addChild(aaa1)
            console.log("zoom ===== ")
            console.log(viewer.scene.scaleX)

            //viewer.scene.scaleX*=6
            //viewer.scene.scaleY*=6
            //viewer.scene.x+=200
            //viewer.scene.y-=300
            //zoomView.startZoom(gridClient.currentGrid.width/2, gridClient.currentGrid.height/2)
            //zoomView.zoom(3)


        });*/


        ros.on('connection', function () {
            console.log("Connected!!!!!")
            // Create the main viewer.
            var viewer3d = new ROS3D.Viewer({
                divID: 'map3d',
                width: 800,
                height: 600,
                antialias: true
            });

            var tfClient = new ROSLIB.TFClient({
                ros: ros,
                angularThres: 0.01,
                transThres: 0.01,
                rate: 10.0,
                fixedFrame: 'map',
                serverName: 'tf2_web_republisher'
            });


            var laserScan = new ROS3D.LaserScan({
                    ros: ros,
                    topic: 'scan',
                    tfClient: tfClient,
                    rootObject: viewer3d.scene,
                    material: {
                        color: 0x880000,
                        size: 0.1
                    }
                }

            )

            var sn = null


            var pathDisplay = new ROS3D.Path({
                ros: ros,
                tfClient: tfClient,
                rootObject: viewer3d.scene,
                topic: 'move_base/NavfnROS/plan'

            })

            viewer3d.addObject(pathDisplay);


            var poseR = new ROS3D.Pose({
                ros: ros,
                tfClient: tfClient,
                rootObject: viewer3d.scene,
                topic: 'robot_pose'

            })


            var urdfClient = new ROS3D.UrdfClient({
                ros: ros,
                tfClient: tfClient,
                rootObject: viewer3d.scene
            });

            var gridClient3d = new ROS3D.OccupancyGridClient({
                ros: ros,
                continuous: true,
                rootObject: viewer3d.scene
            });


            var tfClientM = new ROSLIB.TFClient({
                ros: ros,
                angularThres: 0.01,
                transThres: 0.01,
                rate: 10.0,
                fixedFrame: '/map'
            });





            var imClient = new ROS3D.InteractiveMarkerClient({
                ros: ros,
                tfClient: tfClientM,
                topic: '/simple_marker',
                camera: viewer3d.camera,
                rootObject: viewer3d.selectableObjects
            });


            var robotPosition = new ROS3D.MarkerClient({
                ros: ros,
                tfClient: tfClientM,
                topic: '/visualization_marker',
                camera: viewer3d.camera,
                rootObject: viewer3d.selectableObjects,
                lifetime: 10

            })


            var robotWaypoints = new ROS3D.MarkerArrayClient({
                ros: ros,
                tfClient: tfClientM,
                topic: '/visualization_marker_array',
                rootObject: viewer3d.selectableObjects,

            })


            twist = new ROSLIB.Message({
                linear: {
                    x: 0,
                    y: 0,
                    z: 0
                },
                angular: {
                    x: 0,
                    y: 0,
                    z: 0
                }
            });
            // Init topic object
            cmdVel = new ROSLIB.Topic({
                ros: ros,
                name: '/cmd_vel',
                messageType: 'geometry_msgs/Twist'
            });
            // Register publisher within ROS system
            cmdVel.advertise();

            listener = new ROSLIB.Topic({
                ros: ros,
                name: '/raw_odom',
                messageType: 'nav_msgs/Odometry'

            });
            var odom_count = 0
            listener.subscribe(function (message) {
                //console.log('Received message on ' + listener.name + ': ' + message.twist.twist.linear.x);
                $("#GaugeMeter_1").gaugeMeter({
                    used: message.twist.twist.linear.x * 100,
                    percent: message.twist.twist.linear.x * 100
                });

                gauge_lin.set(message.twist.twist.linear.x); // set actual value
                //message.twist.twist.angular.z
                //listener.unsubscribe();

                odom_count = odom_count + 1
                if (odom_count % 50 == 0) {

                    myChart.data.labels.shift();
                    myChart.data.datasets.forEach((dataset) => {
                        dataset.data.shift();
                    });
                    //myChart.update();

                    myChart.data.labels.push(message.header.seq);
                    //myChart.data.datasets.forEach((dataset) => {
                    myChart.data.datasets[0].data.push(message.twist.twist.angular.z);
                    myChart.data.datasets[1].data.push(message.twist.twist.linear.x);


                    //});
                    myChart.update();
                    odom_count = 0
                }
            });


            listener = new ROSLIB.Topic({
                ros: ros,
                name: '/imu/data',
                messageType: 'sensor_msgs/Imu'

            });
            var imu_count = 0
            listener.subscribe(function (message) {
                imu_count = imu_count + 1
                if (imu_count % 50 == 0) {
                    //console.log('IMU Received message on ' + listener.name + ': ' + message.orientation.w);
                    imu_count = 0;


                    /* myChart.data.labels.shift();
                     myChart.data.datasets.forEach((dataset) => {
                         dataset.data.shift();
                     });
                     //myChart.update();

                     myChart.data.labels.push(message.header.seq);
                     //myChart.data.datasets.forEach((dataset) => {
                         myChart.data.datasets[0].data.push(message.orientation.w);
                         myChart.data.datasets[1].data.push(message.angular_velocity.z);


                     //});
                     myChart.update();*/
                }

            });


        });




        var actionClient = new ROSLIB.ActionClient({
            ros: ros,
            actionName: 'move_base_msgs/MoveBaseAction',
            serverName: '/move_base'
        });



        function sendGoal() {
            // create a goal


            console.log("send goal")
            //console.log(pose)
            console.log(g_pose)


            var goal = new ROSLIB.Goal({
                actionClient: actionClient,
                goalMessage: {
                    target_pose: {
                        header: {
                            frame_id: 'map'
                        },
                        pose: g_pose.pose
                    }
                }
            });
            goal.send();

            goal.on('feedback', function (feedback) {
                console.log('Feedback: ' + feedback);
            });

            goal.on('result', function (result) {
                console.log('Final Result: ' + result);
            });


        }


        var getPoseSrv = new ROSLIB.Service({
            ros: ros,
            name: '/get_pose',
            serviceType: 'agv_interface/getpost'
        })




        var startSLAMsrv = new ROSLIB.Service({
            ros: ros,
            name: '/start_slam',
            serviceType: 'agv_interface/slamsrv'
        });

        var onSlam = new ROSLIB.ServiceRequest({
            onezero: 1,
            map_file: "map_office"
        });



        var offSlam = new ROSLIB.ServiceRequest({
            onezero: 0,
            map_file: "map_office"
        });



        var startNavSrv = new ROSLIB.Service({
            ros: ros,
            name: '/start_navigation',
            serviceType: 'agv_interface/navigatesrv'
        });

        var onNav = new ROSLIB.ServiceRequest({
            onezero: 1,
            map_file: "map_office"
        });

        var offNav = new ROSLIB.ServiceRequest({
            onezero: 0,
            map_file: "map_office"
        });







        var onMarker = new ROSLIB.ServiceRequest({
            onezero: 1
        });

        var offMarker = new ROSLIB.ServiceRequest({
            onezero: 0
        });

        var showPoseMarker = new ROSLIB.Service({
            ros: ros,
            name: '/poseestimate_markers_service',
            serviceType: 'agv_interface/poseestimate'
        });


        var showNavMarker = new ROSLIB.Service({
            ros: ros,
            name: '/waypoint_markers_service',
            serviceType: 'agv_interface/navigatesrv'
        });

        var setPose = new ROSLIB.Service({
            ros: ros,
            name: '/set_pose',
            serviceType: 'agv_interface/poseestimate'
        });

        var getMap = new ROSLIB.Service({
            ros: ros,
            name: '/get_map',
            serviceType: 'agv_interface/maps'
        });

        var getWaypointList = new ROSLIB.Service({
            ros: ros,
            name: '/list_waypoint',
            serviceType: 'agv_interface/maps'
        });

        var getWayPoints = new ROSLIB.Service({
            ros: ros,
            name: '/get_waypoint',
            serviceType: 'agv_interface/waypointsarray'
        });

        var getWaypointName = new ROSLIB.Service({
            ros: ros,
            name: '/get_waypoint_name',
            serviceType: 'agv_interface/waypointname'
        });

        var getPoseWaypointName = new ROSLIB.Service({
            ros: ros,
            name: '/get_a_waypoint',
            serviceType: 'agv_interface/awaypoint'
        });





        var saveMapSrv = new ROSLIB.Service({
            ros: ros,
            name: '/save_map',
            serviceType: 'agv_interface/savemaps'
        })




        function startSLAM() {
            if (document.getElementById('switch_slam').checked) {

                startSLAMsrv.callService(onSlam, function (result) {
                    console.log(result);
                })
            } else {
                startSLAMsrv.callService(offSlam, function (result) {
                    console.log(result);
                })
            }


            console.log("Click Click")
        }


        $(function () {
            $('#switch_nav').change(function () {
                var check_nav = $(this).prop('checked')
                mapname = $('#mapTable').bootstrapTable('getSelections')[0].name

                if (check_nav == true) {

                    var onNav_ = new ROSLIB.ServiceRequest({
                        onezero: 1,
                        map_file: mapname
                    });

                    console.log(onNav_)

                    startNavSrv.callService(onNav_, function (result) {
                        console.log(result);
                    })
                    document.getElementById("switch_slam").disabled = true
                    document.getElementById("save_map_btn").disabled = true


                } else {

                    var offNav_ = new ROSLIB.ServiceRequest({
                        onezero: 0,
                        map_file: mapname
                    });


                    console.log(offNav_)

                    startNavSrv.callService(offNav_, function (result) {
                        console.log(result);
                    })

                    document.getElementById("switch_slam").disabled = false
                    document.getElementById("save_map_btn").disabled = false
                }
                console.log(check_nav)
            })
        })


        $(function () {
            $('#switch_slam').change(function () {
                var check_nav = $(this).prop('checked')
                if (check_nav == true) {

                    startSLAMsrv.callService(onSlam, function (result) {
                        console.log(result);
                    })

                    document.getElementById("switch_nav").disabled = true


                } else {
                    startSLAMsrv.callService(offSlam, function (result) {
                        console.log(result);
                    })

                    document.getElementById("switch_nav").disabled = false
                }
                console.log(check_nav)
            })
        })


        $(function () {
            $('#show_pose_marker').change(function () {
                var check_nav = $(this).prop('checked')
                if (check_nav == true) {

                    showPoseMarker.callService(onMarker, function (result) {
                        console.log(result);
                    })
                } else {
                    showPoseMarker.callService(offMarker, function (result) {
                        console.log(result);
                    })
                }
                console.log(check_nav)
            })
        })


        $(function () {
            $('#show_nav_marker').change(function () {
                var check_nav = $(this).prop('checked')
                if (check_nav == true) {

                    showNavMarker.callService(onMarker, function (result) {
                        console.log(result);
                    })
                } else {
                    showNavMarker.callService(offMarker, function (result) {
                        console.log(result);
                    })
                }
                console.log(check_nav)
            })
        })









        function loadMap() {
            getMap.callService(onMarker, function (result) {
                console.log("Done");
                console.log(result);
                var dataSet = []
                result.map_file.forEach(fn => {
                    var item = {
                        name: fn
                    }
                    dataSet.push(item)
                    console.log(fn)

                });


                console.log(dataSet)

                $('#mapTable').bootstrapTable({
                    data: dataSet
                })

                // $('#mapTable').bootstrapTable("destroy");
                $('#mapTable').bootstrapTable('load', dataSet)



            })


            /*getWaypointList.callService(onMarker, function (result) {
                console.log("Done");
                console.log(result);
                var dataSet = []
                result.map_file.forEach(fn => {
                    var item = {
                        name: fn
                    }
                    dataSet.push(item)
                    console.log(fn)

                });


                console.log(dataSet)

                $('#waypointTable').bootstrapTable({
                    data: dataSet
                })

                // $('#mapTable').bootstrapTable("destroy");
                $('#waypointTable').bootstrapTable('load', dataSet)



            })*/



        }








        $(function () {
            $('#exampleModal').on('show.bs.modal', function () {
                // do something…
                console.log("Modal loaded")
                var table = document.getElementById('tableContents');
                var tableContents = ''
                dataFiles.forEach(fn => {
                    console.log(fn)
                    tableContents = tableContents + '<tr class="clickableRow"><td>' + fn +
                        '</td></tr>';

                });
                console.log(tableContents)
                table.innerHTML = tableContents;

            })
        })






        /*$(function () {
            $('#mapTable').on('click', 'tbody tr', function (event) {
                $(this).addClass('highlight').siblings().removeClass('highlight');
                //var myTable = $('#mapTable').DataTable();
                //var numberOfSelections = $('#mapTable').bootstrapTable('getSelections').row; 
                console.log(myTable)
            });
        })*/




        function setPoseCall() {
            setPose.callService(onMarker, function (result) {
                console.log(result);
            })
        }

        function setNavCall() {
            setPose.callService(onMarker, function (result) {
                console.log(result);
            })
        }

        function getPose() {
            console.log("get pose")
            console.log(selectedMapName)
            console.log(seqWayPoint)
            var mapname = $('#mapTable').bootstrapTable('getSelections')[0].name
            var poseReq = new ROSLIB.ServiceRequest({
                name: wpointname.value,
                seq: seqWayPoint,
                mapname: mapname
            });
            console.log(poseReq)
            console.log(getPoseSrv)
            getPoseSrv.callService(poseReq, function (result) {
                console.log(result);
            })
        }

        function setWaypointBtnActivation() {
            if (!document.getElementById('waypointname').value.length) {
                document.getElementById("setwaypointbtn").disabled = true;
            } else {
                document.getElementById("setwaypointbtn").disabled = false;

            }
        }


        function saveMap() {
            var inputVal = document.getElementById("map_name").value;
            var mapName_ = new ROSLIB.ServiceRequest({
                mapfile: inputVal
            });

            console.log(mapName_)
            console.log(saveMapSrv)

            saveMapSrv.callService(mapName_, function (result) {
                console.log(result);
            })
            console.log(inputVal)
        }
    </script>
</head>



<body>

    <div class="container-fluid">
        <div class="row">
            ROS
        </div>


        <div class="row mx-2">

            <div class="col-2">


                <div class="row">
                    SLAM: <input type="checkbox" id="switch_slam" data-toggle="toggle" />
                    <button type="button" class="btn btn-info btn-lg" data-toggle="modal" id="save_map_btn"
                        data-target="#saveMapModal">Save map</button>
                </div>



                <div class="row">
                    Pose estimate: <input type="checkbox" id="show_pose_marker" data-toggle="toggle" />
                    <button type="button" class="btn btn-secondary" onclick="setPoseCall()">Set pose</button>
                </div>

                <div class="row">
                    Pick waypoint: <input type="checkbox" id="show_nav_marker" data-toggle="toggle" />
                    <button type="button" id="setwaypointbtn" class="btn btn-secondary" onclick="getPose()" disabled>Set
                        waypoint</button>
                    <input type="text" id="waypointname" name="wname" onkeyup="setWaypointBtnActivation()">
                </div>

                <div class="row">
                    <div class="col">
                        <div class="GaugeMeter" id="GaugeMeter_1" data-width="20" data-total="100" data-style="Semi"
                            data-showvalue=true>
                        </div>
                    </div>
                    <div class="col">
                        <canvas id="gauge_1"></canvas>
                    </div>



                </div>

                <div class="row">
                    <div class="col">
                        <div class="d-flex justify-content-center" style="width: 210px; height: 210px;">
                            <div id="joystick"></div>
                        </div>
                    </div>
                </div>




            </div>
            <div class="col-8" min-height="100vh">
                <div id="map3d" min-height="100vh"></div>
            </div>
            <div class="col-2">




                <button type="button" class="btn btn-primary" onclick="loadMap()">
                    Refresh data
                </button>

                <table id="mapTable" data-click-to-select="true" data-single-select="true">
                    <thead>
                        <tr>
                            <th data-field="state" data-checkbox="true"></th>
                            <th data-field="name">Map Name</th>

                        </tr>
                    </thead>
                </table>




                <table id="waypointTable" data-click-to-select="true" data-single-select="true">
                    <thead>
                        <tr>
                            <th data-field="state" data-checkbox="true"></th>
                            <th data-field="name">Waypoint Name</th>

                        </tr>
                    </thead>
                </table>


                <!--<button id="set_map_btn" class="btn btn-secondary">set map</button>-->
                <div class="row">
                    NAV: <input type="checkbox" id="switch_nav" data-toggle="toggle" />
                </div>
                <div class="row">
                    <button type="button" class="btn btn-primary" onclick="sendGoal()">
                        Go
                    </button>
                </div>
                <div class="row">
                    <canvas id="imuChart" width="1600" height="900"></canvas>
                </div>

            </div>
        </div>

    </div>







    </div>




    <!-- Modal -->



    <div class="modal fade" id="saveMapModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span
                            aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title" id="exampleModalLabel">Enter map name</h4>
                </div>
                <div class="modal-body">
                    <form role="form">

                        <div class="form-group">
                            <label for="first-name" class="control-label"></label>
                            <input type="text" class="form-control" id="map_name" placeholder="Map name">
                        </div>


                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" onclick="saveMap()"> Save</button>
                </div>
            </div>
        </div>
    </div>
</body>

</html>